/*  =========================================================
clamp
========================================================= */
.easy-clamp(@clampMin, @clampMax, @winMin: 650, @winMax: 1920) {
  @clampValue: "((@{clampMax} - @{clampMin}) / (@{winMax} / 100))";

  @correctionValue: ~"((@{clampValue} * (@{winMin} / 100) * 1.5))";
  @correctedClampValue: ~"((@{clampMax} - @{clampMin} + @{correctionValue}) / (@{winMax} / 100))";

  @result: clamp(
    .REMfy(@clampMin) [ @result],
    calc(~"(1rem / 16 * (@{clampMin} - @{correctionValue})) + (1vw * @{correctedClampValue})"),
    .REMfy(@clampMax) [ @result];
  );
}

/*  =========================================================
margins
========================================================= */
.easy-margin-horizontal(@padding) {
  margin-left: @padding;
  margin-right: @padding;
}
.easy-margin-vertical(@padding) {
  margin-bottom: @padding;
  margin-top: @padding;
}

/*  =========================================================
border
========================================================= */
.easy-border-horizontal(@border) {
  border-left: @border;
  border-right: @border;
}
.easy-border-vertical(@border) {
  border-bottom: @border;
  border-top: @border;
}

/*  =========================================================
paddings
========================================================= */
.easy-padding-horizontal(@padding) {
  padding-left: @padding;
  padding-right: @padding;
}
.easy-padding-vertical(@padding) {
  padding-bottom: @padding;
  padding-top: @padding;
}

/*  =========================================================
flex
========================================================= */
.easy-flex {
  .inline {
    .horizontal (@gap: 0, @reverse: false) {
      column-gap: @gap;
      display: inline-flex;
    }
    .horizontal (@gap: 0, @reverse: false) when (@reverse = false) {
      flex-direction: row;
    }
    .horizontal (@gap: 0, @reverse: false) when (@reverse = true) {
      flex-direction: row-reverse;
    }

    .vertical (@gap: 0, @reverse: false) {
      display: inline-flex;
      row-gap: @gap;
    }
    .vertical (@gap: 0, @reverse: false) when (@reverse = false) {
      flex-direction: column;
    }
    .vertical (@gap: 0, @reverse: false) when (@reverse = true) {
      flex-direction: column-reverse;
    }
  }
  .block {
    .horizontal (@gap: 0, @reverse: false) {
      column-gap: @gap;
      display: flex;
    }
    .horizontal (@gap: 0, @reverse: false) when (@reverse = false) {
      flex-direction: row;
    }
    .horizontal (@gap: 0, @reverse: false) when (@reverse = true) {
      flex-direction: row-reverse;
    }

    .vertical (@gap: 0, @reverse: false) {
      display: flex;
      row-gap: @gap;
    }
    .vertical (@gap: 0, @reverse: false) when (@reverse = false) {
      flex-direction: column;
    }
    .vertical (@gap: 0, @reverse: false) when (@reverse = true) {
      flex-direction: column-reverse;
    }
  }
}

/*  =========================================================
grid
========================================================= */
.generateGrid(@outsideWidth, @insideWidth, @maxSpan: 100%, @elementGap: 0, @className: grid-item-, @elementCount: 12) {
  display: grid;
  column-gap: @elementGap;
  grid-template-columns: repeat(@elementCount, 1fr);

  max-width: @maxSpan;
  width: calc(@insideWidth / @outsideWidth * 100%);

  .marginHorizontally(auto);

  .generateGridItems(@className, @elementGap, @elementCount);
}
.generateGridItems(@className: h-el-, @elementGap: 0, @elementCount: 12, @index: 1) when(@index =< @elementCount) {
  .@{className}-@{index}:not([class*="#{$className}-off-"]) {
    grid-column: span @index;
  }
  .generateGridItemOffsets(@className, @elementGap, @elementCount - @index , @index);

  .generateGridItems(@className, @elementGap, @elementCount, @index + 1);
}

.generateGridItemOffsets(@className: h-el-, @elementGap: 0, @elementCount: 12, @index: 1, @offset: 1) when(@offset <= @elementCount) {
  .@{className}-@{index}.@{className}-off-@{offset} {
    // old way - not sure if we will need it again for browser compatibility so I'm leaving this here. if there is a problem with grid-column, use this instead
    grid-column: span @index + @offset;
    margin-left: calc(@offset / (@index + @offset) * 100% + (@elementGap / (@index + @offset) * @offset));

    // new way - this is the way it should be done
    //grid-column: (@offset + 1) / span @index;
  }

  .generateGridItemOffsets(@className, @elementGap, @elementCount, @index, @offset + 1);
}


/*  =========================================================
helper
========================================================= */
.REMfy(@pxSize, @emSize: 16) {
  @result: calc(~"1rem / @{emSize} * @{pxSize}");
}

/// remove browser preset styles for buttons
.stripTheButton() {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}
/// remove browser preset styles for inputs
.stripTheInput() {
  background: none;
  border: none;
  padding: 0;
}
